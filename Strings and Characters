 //1)******* ACCESSING & MODIFYING A STRING ********
                                  
 //1A)STRING INDICES
      
/*As mentioned above, different characters can require different
amounts of memory to store, so in order to determine which Character is at a particular
position, you must iterate over each Unicode scalar from the start or end of that String.
For this reason, Swift strings can’t be indexed by integer values.
*/
//Swift strings CAN'T be indexed by integer values.                 *******
let ss = "AanchalPatial"
//print(ss[2]) is AN ERROR

print(ss[ss.startIndex])

var j = ss.index(after: ss.startIndex)
print(ss[j])

var k = ss.index(before: ss.endIndex)
print(ss[k])

var i = ss.index(ss.startIndex,offsetBy: 2)
print(ss[i])for j in ss.indices {
print(ss[j],terminator: "")}

for j in ss.indices {
print(ss[j],terminator: "")    }
//works in 4+ swift versions
//OUTPUT : AanchalPatial

//1B)INSERTING & REMOVING
      
var name = "cris ronald7o"
//insert a character
var i = name.endIndex
name.insert("7",at: i)
print(name)
//OUTPUT: cris ronald7o7

//insert a string
var tag = "tiano"
i = name.index(name.startIndex,offsetBy: 4)
name.insert(contentsOf: tag,at: i)
print(name)
//OUTPUT: cristiano ronald7o7

//remove a character
i = name.index(name.startIndex,offsetBy: 16)
name.remove(at: i)
print(name)
//OUTPUT: cristiano ronaldo7

//remove a substring
let range = name.startIndex...name.index(name.startIndex,offsetBy: 9)
name.removeSubrange(range)
print(name)
//OUTPUT: ronaldo7

 

//2)MULTILINE STRING LITERALS: a string that spans several lines
 //works only in swift 4+ versions
 var str = """
 my name 
 is 
 aanchal \ 
 patial
 """
 /*If you want to use line breaks to make your source code easier to read,
 but you don’t want the line breaks to be part of the string’s value,
 write a backslash (\) at the end of those lines:*/
 
 
 
//3)SUBSTRING
/*When you get a substring from a string, the result is an instance of Substring, not another string
However, unlike strings, you use substrings for only a short amount of time while performing actions on a string. 
When you’re ready to store the result for a longer time, you convert the substring to an instance of String.
As mentioned above, substrings aren’t suitable for long-term storage—because they reuse the storage of the original string,
the entire original string must be kept in memory as long as any of its substrings are being used.
Refer to this link for clear understanding:- https://docs.swift.org/swift-book/_images/stringSubstring_2x.png*/
var name2 = "aanchal patial"
var k = name2.firstIndex(of: "p")
var surname = name2[p..<name2.endIndex]
print(surname)
var surnameString = String(surname)
//OUTPUT: patial


//4)COMPARING STRINGS
/*Swift provides THREE ways to compare textual values: 
string and character equality, prefix equality, and suffix equality.*/
//4A) == & !=
*Two String values (or two Character values) are considered equal if their extended grapheme clusters are 
canonically equivalent. Extended grapheme clusters are canonically equivalent if they have the same
linguistic meaning and appearance, even if they’re composed from different Unicode scalars behind the scenes.*/
//4B) hasPrefix
var alp = "abcdefghijkl"
if alp.hasPrefix("abc") {
    print("abc found is prefix of string")
}
//4C) hasSuffix
if alp.hasSuffix("jkl") {
    print("jkl is suffix of string")
}

 
//5)Special Characters
 /An arbitrary Unicode scalar, written as \u{n}
 let sparklingHeart = "\u{1F496}"
 let threeDoubleQuotationMarks = """
Escaping the first quotation mark \"""
Escaping all three quotation marks \"\"\"
"""

//6)Initialising an empty string
var str2 = ""
if str2.isEmpty {print("given string is empty.")}

//7)Swift’s String type is a value type.

//8)Unicode scalar is a unique 21-bit number for a character or modifier
let chick = "\u{1F425}"

//9)size of string
print(str.count)

                           
//10)Unicode Representations of Strings...........left







 
 
 
 
