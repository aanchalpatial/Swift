import Foundation

//FOR IN LOOPS
//for-in loop to iterate over a sequence, such as items in an array, ranges of numbers, or characters in a string.
var ap = "aanchalpatial"
for i in ap {
    print(i,terminator: "-")
}
print()
/*You can also iterate over a dictionary to access its key-value pairs.The contents of a Dictionary are inherently unordered
, and iterating over them does not guarantee the order in which they will be retrieved.In particular, 
the order you insert items into a Dictionary doesn’t define the order they are iterated.*/ 
var playerTeam = ["ronaldo": "juventus","messi": "barcelona","neymar": "paris saint german"]
for (i,j) in playerTeam {
print("\(i) plays for \(j)")
}
/*If you don’t need each value from a sequence, you can ignore the values by 
using an underscore in place of a variable name.*/
for _ in 1...5 {print("*",terminator: " ")}
print()
/*stride() fucntion is used when user wants to increment not just by 1*/
for i in stride(from: 0,to: 10,by: 2) {print(i,terminator: " ")}
print()
//through is used in stride for inclusive upper bound
for i in stride(from: 0,through: 10,by: 2) {print(i,terminator: " ")}
print()


//WHILE LOOPS
/*These kinds of loops are best used when the number of iterations is not known before the first iteration begins. 
Swift provides two kinds of while loops:
WHILE evaluates its condition at the start of each pass through the loop.
REPEAT-WHILE evaluates its condition at the end of each pass through the loop.This loop is same as do-while loop on c++
*/

//if else statements same as in c++
//switch statment in swift doesn't require break; statement
/*In contrast with switch statements in C and Objective-C, switch statements in Swift do not fall through 
the bottom of each case and into the next one by default. Instead, the entire switch statement 
finishes its execution as soon as the first matching switch case is completed, without requiring 
an explicit break statement. This makes the switch statement safer and easier to use than the 
one in C and avoids executing more than one switch case by mistake.
*/
var name = "aanchal"
switch name {
    case "aanchal": 
        print("surname of aanchal is patial")
        print("blah")
    case "raj": 
        print("surname of raj is kumar")
    default:
        print("not a valid first name")
}
//Values in switch cases can be checked for their inclusion in an interval.
var num = 66
switch num {
    case 1...50:
    print("ur number is between 1-50")
    case 51...100:
    print("ur number is between 51-100")
    default:
    print("out of bounds")
}
//You can use tuples to test multiple values in the same switch statement.
var name_number = ("ap",10)
switch name_number {
    case ("ap",10):
    print("matched_AP")
    case ("cr",11):
    print("matched_CR")
    default:
    print("not matched")
}



